type URL = text;
type Tokens = record {amount_e8s: nat;};
type TermsOfOwnership = text;
type SystemParams = 
 record {
   contract_create_threshold: Tokens;
   contract_submission_deposit: Tokens;
   transfer_fee: Tokens;
 };
type ScopeOfWork = text;
type Result = 
 variant {
   err: text;
   ok: text;
 };
type PriceOfContract = nat;
type MusallStableStorage = 
 record {
   accounts: vec Account;
   contracts: vec Contract;
   system_params: SystemParams;
 };
type Musall = 
 service {
   create: (Account) -> (Result);
   creator_contract_submitted: (text, text, nat, text, nat, text) -> (Result);
   get_all_contracts: () -> (vec Contract);
   get_first_contract: () -> (Contract);
   whoami: () -> (text);
 };
type ContractDescription = text;
type Contract = 
 record {
   contract_description: ContractDescription;
   creator: principal;
   creator_rating: nat;
   id: nat;
   number_of_tokens: nat;
   price_of_contract: PriceOfContract;
   scope_of_work: ScopeOfWork;
   terms_of_ownership: TermsOfOwnership;
   url: URL;
 };
type Account = 
 record {
   owner: principal;
   tokens: Tokens;
 };
service : (MusallStableStorage) -> Musall
